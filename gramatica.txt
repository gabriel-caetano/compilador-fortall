Gramática escrita

<PROG>		    -> programa id; <DECLARACOES> inicio <COMANDOS> fim .
<DECLARACOES>	-> var <IDS> : <TIPO> ; <DECLARACOES> | ε
<TIPO>		    -> inteiro | logico
<COMANDOS>	    -> <COMANDO> ; <COMANDOS> | ε
<COMANDO>	    -> <ATRIBUICOES> | <LEITURA> | <ESCRITA> | <COMPOSTO> | <CONDICIONAL> | <REPETICAO>
<ATRIBUICOES>	-> id := <EXPR>
<LEITURA>	    -> Ler(<IDS>) 
<ESCRITA>       -> Escrever ( <ESPR_STR> )
<ESPR_STR>      -> <ITEM_ESCRITA> <ESPR_STR_>
<ESPR_STR_>     -> , <ITEM_ESCRITA> <ESPR_STR_> | ε
<ITEM_ESCRITA>  -> <EXPR> | <EXPR_LOGICA> | str | id
<COMPOSTO>	    -> inicio <COMANDOS> fim
<CONDICIONAL>	-> se <EXPR_LOGICA> entao <COMANDOS> senao <COMANDOS> fim | se <EXPR_LOGICA> entao <COMANDOS> fim
<REPETICAO>	    -> enquanto <EXPR_LOGICA> faca <COMANDOS> fim
<IDS>           -> id <_IDS>
<_IDS>		    -> , id <_IDS> | ε
<EXPR>          -> <TERMO> <EXPR_>
<EXPR_>         -> + <TERMO> <EXPR_> | - <TERMO> <EXPR_> | ε
<TERMO>         -> <FATOR> <TERMO_>
<TERMO_>        -> * <FATOR> <TERMO_> | / <FATOR> <TERMO_> | ε
<FATOR>         -> , <FATOR> | num | id | ( <EXPR> )
<EXPR_LOGICA>   -> <TERMO_LOGICO> || <EXPR_LOGICA> | <TERMO_LOGICO>
<TERMO_LOGICO>  -> <FATOR_LOGICO> && <TERMO_LOGICO> | <FATOR_LOGICO>
<FATOR_LOGICO>  -> ! <FATOR_LOGICO> | <RELACIONAL> | ( <EXPR_LOGICA> ) | id | bool
<RELACIONAL>    -> <EXPR> <OP_REL> <EXPR>
<OP_REL>        -> < | <= | > | >= | = | <>