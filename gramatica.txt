Gramática escrita

<PROG>		    -> programa id; <DECLARACOES> <COMPOSTO> .

<DECLARACOES>	-> <DECLARACAO> <_DECLARACAO> | ε
<DECLARACAO>    -> var <ID> <_ID> : <TIPO> ;
<_DECLARACAO>   -> <DECLARACAO> <_DECLARACAO> | ε
<TIPO>		    -> inteiro | logico
<ID>            -> id <_ID>
<_ID>		    -> , <ID> <_ID> | ε

<COMPOSTO>	    -> inicio <COMANDOS> fim
<COMANDOS>	    -> <COMANDO>; <_COMANDO> | ε
<COMANDO>	    -> <ATRIBUICAO> | <LEITURA> | <ESCRITA> | <COMPOSTO> | <CONDICIONAL> | <REPETICAO>
<_COMANDO>      -> <COMANDO>; <_COMANDO> | ε

<ATRIBUICAO>	-> id := <EXPR> | id := <EXPR_LOGICA>
<LEITURA>	    -> Ler(<ID><_ID>)
<ESCRITA>       -> Escrever (<ESPR_STR>)
<CONDICIONAL>	-> se <EXPR_LOGICA> entao <COMANDOS> senao <COMANDOS> fim | se <EXPR_LOGICA> entao <COMANDOS> fim
<REPETICAO>	    -> enquanto <EXPR_LOGICA> faca <COMANDOS> fim

<ESPR_STR>      -> <ITEM_ESCRITA> <_ITEM_ESCRITA> | ε
<ITEM_ESCRITA>  -> <EXPR> | <EXPR_LOGICA> | str | id
<_ITEM_ESCRITA> -> , <ITEM_ESCRITA> <_ITEM_ESCRITA> | ε

<EXPR>          -> <TERMO> <_EXPR>
<_EXPR>         -> + <TERMO> <_EXPR> | - <TERMO> <_EXPR> | ε
<TERMO>         -> <FATOR> <_TERMO>
<_TERMO>        -> * <FATOR> <_TERMO> | / <FATOR> <_TERMO> | ε
<FATOR>         -> - <FATOR> | num | id | ( <EXPR> )

<EXPR_LOGICA>   -> <TERMO_LOGICO> <_EXPR_LOGICA>
<_EXPR_LOGICA>  -> || <TERMO_LOGICO> <_EXPR_LOGICA> | ε
<TERMO_LOGICO>  -> <FATOR_LOGICO> <_TERMO_LOGICO>
<_TERMO_LOGICO> -> && <FATOR_LOGICO> <_TERMO_LOGICO> | ε
<FATOR_LOGICO>  -> ! <FATOR_LOGICO> | <RELACIONAL> | ( <EXPR_LOGICA> ) | id | bool
<RELACIONAL>    -> <EXPR_REL> <OP_REL> <EXPR_REL> | <EXPR> <OP_INT> <EXPR>
<EXPR_REL>      -> <EXPR> | <EXPR_LOGICA>
<OP_REL>        -> = | <>
<OP_INT>        -> < | <= | > | >=